{"name":"Cucumber-statistics","tagline":"A cucumber standalone tests based statistics server.","body":"## Whats for?\r\n\r\nCucumber Statistics is a stand alone node server that is able to store information\r\nabout cucumber executions.\r\nThe idea of this project is to simplify the daily work of a person who wants to\r\nkeep tracking of nightly builds of a project.\r\nCucumber Statistics provides statistics about the stability of scenarios and\r\nstep definitions for a cucumber test suite. Also provides a easy way to see all\r\nthe failed scenarios the last night when dealing with many nightly builds.\r\nCucumber Statistics can be replaced with jenkins plugins with the same propouse,\r\nif you don't have jenkins or your jenkins server configuration is out of your\r\ncontrol but not the jobs configuration, then Cucumber Statistics is for you.\r\n\r\n## How To?\r\n\r\nIn order to use Cucumber Statistics you will need the following prerequisites\r\n\r\n- A PC with node.js >= 0.12 installed and git(optional).\r\n- Control of the firewall, cucumber-statistics uses the port 9088, to serve the\r\nweb page and the REST service to push and get information of cucumber.\r\n- (optional) be able to inject bash commands or similar in your nightly/automated\r\njob test process, if you can't you will have to push the data manually.\r\n\r\n### In your server\r\nIf you don't have git in your server or you don't want to have you can download\r\nit from github.\r\n[Download as zip](https://github.com/danyg/cucumber-statistics/archive/master.zip)\r\nor you can use wget...\r\n\r\n**Normal Use**\r\n```\r\ngit clone https://github.com/danyg/cucumber-statistics.git\r\nnpm install\r\nnode main\r\n```\r\n\r\nNow cucumber-statistics is working (assuming you don't have a firewall need to\r\nbe configured).\r\ncucumber-statistics will show you all the interfaces available where you can\r\nreach it when running.\r\n\r\n### In your CI job\r\nYou need to investigate how to add an after build process, and send the\r\ngenerated cucumber.json to your server.\r\n\r\n#### Using curl\r\n```\r\ncurl -i -X PUT <YOUR_SERVER_URL>:9088/db/set/$BUILD_NAME/$BUILD_NUMBER -H \"Content-Type: application/json\" --data-binary \"@./trunk/myProject/target/cucumber/cucumber.json\" >/dev/null 2>&1 | exit 0;\r\n```\r\n\r\n- ```<YOUR_SERVER_URL>``` the ip of your server or a domain if you have one.\r\n- ```$BUILD_NAME``` is the name of the job in Jenkins, this is really important,\r\ncucumber-statistics splits the information by BUILD_NAME / Nightly Name / Job\r\nname / project\r\n- ```$BUILD_NUMBER``` have to be some consecutive number in each execution.\r\nJenkins also provides this environment property.\r\n- ```--data-binary``` here is where you need to write the path to your\r\ncucumber.json (if you don't know what or where it is, google for cucumber json\r\nreports for your cucumber implementation)\r\n- the ```>/dev/null 2>&1``` will send stdout and stderr to /dev/null and\r\n- and ```| exit 0``` will prevent that any issue sending the file to the server\r\ncould cause a failure in your nightly/automated job.\r\n\r\n### How To stop it?\r\nYou probably don't want to :P.\r\n\r\nWell for the moment I did't spend many time doing bash script to start / stop\r\nthe server (if you can do it, please share).\r\n\r\nIf you are in linux you can:\r\n``` ps -ax | grep node ``` you will see 2 process (among other if the case)\r\none is ```node main``` and the other something like this\r\n```/usr/local/bin/node ./server```.\r\n\r\nThe first one is the watchdog, it's checking if the second one (the actual\r\nserver) is still running, if not it will restart it. So you need to kill first\r\nthe watchdog then the server itself.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}